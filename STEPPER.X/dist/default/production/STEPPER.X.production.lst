

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Mar 13 14:12:10 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.10
    21                           ; Generated 31/07/2019 GMT
    22                           ; 
    23                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  008F                     	;# 
    99  0090                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0095                     	;# 
   107  0096                     	;# 
   108  0097                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009A                     	;# 
   112  009B                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  0105                     	;# 
   118  0107                     	;# 
   119  0108                     	;# 
   120  0109                     	;# 
   121  010C                     	;# 
   122  010C                     	;# 
   123  010D                     	;# 
   124  010E                     	;# 
   125  010F                     	;# 
   126  0185                     	;# 
   127  0187                     	;# 
   128  0188                     	;# 
   129  0189                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  000E                     	;# 
   148  000F                     	;# 
   149  0010                     	;# 
   150  0011                     	;# 
   151  0012                     	;# 
   152  0013                     	;# 
   153  0014                     	;# 
   154  0015                     	;# 
   155  0015                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001B                     	;# 
   163  001C                     	;# 
   164  001D                     	;# 
   165  001E                     	;# 
   166  001F                     	;# 
   167  0081                     	;# 
   168  0085                     	;# 
   169  0086                     	;# 
   170  0087                     	;# 
   171  0088                     	;# 
   172  0089                     	;# 
   173  008C                     	;# 
   174  008D                     	;# 
   175  008E                     	;# 
   176  008F                     	;# 
   177  0090                     	;# 
   178  0091                     	;# 
   179  0092                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0093                     	;# 
   183  0094                     	;# 
   184  0095                     	;# 
   185  0096                     	;# 
   186  0097                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009A                     	;# 
   190  009B                     	;# 
   191  009C                     	;# 
   192  009D                     	;# 
   193  009E                     	;# 
   194  009F                     	;# 
   195  0105                     	;# 
   196  0107                     	;# 
   197  0108                     	;# 
   198  0109                     	;# 
   199  010C                     	;# 
   200  010C                     	;# 
   201  010D                     	;# 
   202  010E                     	;# 
   203  010F                     	;# 
   204  0185                     	;# 
   205  0187                     	;# 
   206  0188                     	;# 
   207  0189                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  000E                     	;# 
   226  000F                     	;# 
   227  0010                     	;# 
   228  0011                     	;# 
   229  0012                     	;# 
   230  0013                     	;# 
   231  0014                     	;# 
   232  0015                     	;# 
   233  0015                     	;# 
   234  0016                     	;# 
   235  0017                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  001B                     	;# 
   240  001B                     	;# 
   241  001C                     	;# 
   242  001D                     	;# 
   243  001E                     	;# 
   244  001F                     	;# 
   245  0081                     	;# 
   246  0085                     	;# 
   247  0086                     	;# 
   248  0087                     	;# 
   249  0088                     	;# 
   250  0089                     	;# 
   251  008C                     	;# 
   252  008D                     	;# 
   253  008E                     	;# 
   254  008F                     	;# 
   255  0090                     	;# 
   256  0091                     	;# 
   257  0092                     	;# 
   258  0093                     	;# 
   259  0093                     	;# 
   260  0093                     	;# 
   261  0094                     	;# 
   262  0095                     	;# 
   263  0096                     	;# 
   264  0097                     	;# 
   265  0098                     	;# 
   266  0099                     	;# 
   267  009A                     	;# 
   268  009B                     	;# 
   269  009C                     	;# 
   270  009D                     	;# 
   271  009E                     	;# 
   272  009F                     	;# 
   273  0105                     	;# 
   274  0107                     	;# 
   275  0108                     	;# 
   276  0109                     	;# 
   277  010C                     	;# 
   278  010C                     	;# 
   279  010D                     	;# 
   280  010E                     	;# 
   281  010F                     	;# 
   282  0185                     	;# 
   283  0187                     	;# 
   284  0188                     	;# 
   285  0189                     	;# 
   286  018C                     	;# 
   287  018D                     	;# 
   288  0019                     _TXREG	set	25
   289  001A                     _RCREG	set	26
   290  0005                     _PORTA	set	5
   291  0008                     _PORTD	set	8
   292  0007                     _PORTC	set	7
   293  0006                     _PORTB	set	6
   294  000B                     _INTCONbits	set	11
   295  0009                     _PORTE	set	9
   296  000C                     _PIR1bits	set	12
   297  0065                     _RCIF	set	101
   298  00C4                     _CREN	set	196
   299  00C7                     _SPEN	set	199
   300  0028                     _RA0	set	40
   301  0099                     _SPBRG	set	153
   302  0089                     _TRISE	set	137
   303  0088                     _TRISD	set	136
   304  0087                     _TRISC	set	135
   305  0086                     _TRISB	set	134
   306  0085                     _TRISA	set	133
   307  008C                     _PIE1bits	set	140
   308  008F                     _OSCCONbits	set	143
   309  04C1                     _TRMT	set	1217
   310  04C5                     _TXEN	set	1221
   311  043E                     _TRISC6	set	1086
   312  043F                     _TRISC7	set	1087
   313  04C4                     _SYNC	set	1220
   314  04C2                     _BRGH	set	1218
   315  0189                     _ANSELH	set	393
   316  0188                     _ANSEL	set	392
   317                           
   318                           ; #config settings
   319  0000                     
   320                           	psect	cinit
   321  000F                     start_initialization:	
   322  000F                     __initialization:	
   323                           
   324                           ; Clear objects allocated to COMMON
   325  000F  01F7               	clrf	__pbssCOMMON& (0+127)
   326  0010  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   327  0011  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   328                           
   329                           ; Clear objects allocated to BANK0
   330  0012  1283               	bcf	3,5	;RP0=0, select bank0
   331  0013  1303               	bcf	3,6	;RP1=0, select bank0
   332  0014  01BE               	clrf	__pbssBANK0& (0+127)
   333  0015  01BF               	clrf	(__pbssBANK0+1)& (0+127)
   334  0016                     end_of_initialization:	
   335                           ;End of C runtime variable initialization code
   336                           
   337  0016                     __end_of__initialization:	
   338  0016  0183               	clrf	3
   339  0017  120A  118A  2A5C   	ljmp	_main	;jump to C main() function
   340                           
   341                           	psect	bssCOMMON
   342  0077                     __pbssCOMMON:	
   343  0077                     _P1:	
   344  0077                     	ds	1
   345  0078                     _i:	
   346  0078                     	ds	1
   347  0079                     _S0:	
   348  0079                     	ds	1
   349                           
   350                           	psect	bssBANK0
   351  003E                     __pbssBANK0:	
   352  003E                     _P2:	
   353  003E                     	ds	1
   354  003F                     _S1:	
   355  003F                     	ds	1
   356                           
   357                           	psect	cstackCOMMON
   358  0070                     __pcstackCOMMON:	
   359  0070                     ?_UART_READ:	
   360  0070                     ??_UART_READ:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_LOOP:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_Abrir:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_Cerrar:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_ISR:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ??_ISR:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_main:	
   379                           ; 1 bytes @ 0x0
   380                           
   381                           
   382                           ; 1 bytes @ 0x0
   383  0070                     	ds	3
   384  0073                     ??_Abrir:	
   385  0073                     ??_Cerrar:	
   386                           ; 1 bytes @ 0x3
   387                           
   388  0073                     ??___aldiv:	
   389                           ; 1 bytes @ 0x3
   390                           
   391                           
   392                           ; 1 bytes @ 0x3
   393  0073                     	ds	1
   394  0074                     UART_INIT@x:	
   395                           
   396                           ; 2 bytes @ 0x4
   397  0074                     	ds	1
   398  0075                     ??_LOOP:	
   399                           
   400                           ; 1 bytes @ 0x5
   401  0075                     	ds	2
   402  0077                     ??_main:	
   403                           
   404                           	psect	cstackBANK0
   405  0020                     __pcstackBANK0:	
   406                           ; 1 bytes @ 0x7
   407                           
   408  0020                     ?___aldiv:	
   409  0020                     ___aldiv@divisor:	
   410                           ; 4 bytes @ 0x0
   411                           
   412                           
   413                           ; 4 bytes @ 0x0
   414  0020                     	ds	4
   415  0024                     ___aldiv@dividend:	
   416                           
   417                           ; 4 bytes @ 0x4
   418  0024                     	ds	4
   419  0028                     ___aldiv@counter:	
   420                           
   421                           ; 1 bytes @ 0x8
   422  0028                     	ds	1
   423  0029                     ___aldiv@sign:	
   424                           
   425                           ; 1 bytes @ 0x9
   426  0029                     	ds	1
   427  002A                     ___aldiv@quotient:	
   428                           
   429                           ; 4 bytes @ 0xA
   430  002A                     	ds	4
   431  002E                     ?_UART_INIT:	
   432  002E                     UART_INIT@baudrate:	
   433                           ; 1 bytes @ 0xE
   434                           
   435                           
   436                           ; 4 bytes @ 0xE
   437  002E                     	ds	4
   438  0032                     ??_UART_INIT:	
   439                           
   440                           ; 1 bytes @ 0x12
   441  0032                     	ds	12
   442                           
   443                           	psect	maintext
   444  025C                     __pmaintext:	
   445 ;;
   446 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   447 ;;
   448 ;; *************** function _main *****************
   449 ;; Defined at:
   450 ;;		line 53 in file "STEPPER.c"
   451 ;; Parameters:    Size  Location     Type
   452 ;;		None
   453 ;; Auto vars:     Size  Location     Type
   454 ;;		None
   455 ;; Return value:  Size  Location     Type
   456 ;;                  1    wreg      void 
   457 ;; Registers used:
   458 ;;		wreg, status,2, status,0, pclath, cstack
   459 ;; Tracked objects:
   460 ;;		On entry : B00/0
   461 ;;		On exit  : 0/0
   462 ;;		Unchanged: 0/0
   463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   464 ;;      Params:         0       0       0       0       0
   465 ;;      Locals:         0       0       0       0       0
   466 ;;      Temps:          0       0       0       0       0
   467 ;;      Totals:         0       0       0       0       0
   468 ;;Total ram usage:        0 bytes
   469 ;; Hardware stack levels required when called:    4
   470 ;; This function calls:
   471 ;;		_LOOP
   472 ;;		_UART_INIT
   473 ;; This function is called by:
   474 ;;		Startup code after reset
   475 ;; This function uses a non-reentrant model
   476 ;;
   477                           
   478                           
   479                           ;psect for function _main
   480  025C                     _main:	
   481  025C                     l1129:	
   482                           ;incstack = 0
   483                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   484                           
   485                           
   486                           ;STEPPER.c: 54:   OSCCONbits.IRCF = 0b111;
   487  025C  3070               	movlw	112
   488  025D  1683               	bsf	3,5	;RP0=1, select bank1
   489  025E  1303               	bcf	3,6	;RP1=0, select bank1
   490  025F  048F               	iorwf	15,f	;volatile
   491  0260                     l1131:	
   492                           
   493                           ;STEPPER.c: 55:     OSCCONbits.OSTS= 0;
   494  0260  118F               	bcf	15,3	;volatile
   495  0261                     l1133:	
   496                           
   497                           ;STEPPER.c: 56:     OSCCONbits.HTS = 0;
   498  0261  110F               	bcf	15,2	;volatile
   499  0262                     l1135:	
   500                           
   501                           ;STEPPER.c: 57:     OSCCONbits.LTS = 0;
   502  0262  108F               	bcf	15,1	;volatile
   503  0263                     l1137:	
   504                           
   505                           ;STEPPER.c: 58:     OSCCONbits.SCS = 1;
   506  0263  140F               	bsf	15,0	;volatile
   507  0264                     l1139:	
   508                           
   509                           ;STEPPER.c: 59:     UART_INIT(9600);
   510  0264  3000               	movlw	0
   511  0265  1283               	bcf	3,5	;RP0=0, select bank0
   512  0266  1303               	bcf	3,6	;RP1=0, select bank0
   513  0267  00B1               	movwf	UART_INIT@baudrate+3
   514  0268  3000               	movlw	0
   515  0269  00B0               	movwf	UART_INIT@baudrate+2
   516  026A  3025               	movlw	37
   517  026B  00AF               	movwf	UART_INIT@baudrate+1
   518  026C  3080               	movlw	128
   519  026D  00AE               	movwf	UART_INIT@baudrate
   520  026E  120A  118A  201A  120A  118A  	fcall	_UART_INIT
   521  0273                     l1141:	
   522                           
   523                           ;STEPPER.c: 60:     PIE1bits.RCIE = 1;
   524  0273  1683               	bsf	3,5	;RP0=1, select bank1
   525  0274  1303               	bcf	3,6	;RP1=0, select bank1
   526  0275  168C               	bsf	12,5	;volatile
   527  0276                     l1143:	
   528                           
   529                           ;STEPPER.c: 61:     INTCONbits.PEIE = 1;
   530  0276  170B               	bsf	11,6	;volatile
   531  0277                     l1145:	
   532                           
   533                           ;STEPPER.c: 62:     INTCONbits.GIE = 1;
   534  0277  178B               	bsf	11,7	;volatile
   535  0278                     l1147:	
   536                           
   537                           ;STEPPER.c: 63:     TRISA = 0b00000001;
   538  0278  3001               	movlw	1
   539  0279  0085               	movwf	5	;volatile
   540  027A                     l1149:	
   541                           
   542                           ;STEPPER.c: 64:     TRISB = 0b00000000;
   543  027A  0186               	clrf	6	;volatile
   544  027B                     l1151:	
   545                           
   546                           ;STEPPER.c: 65:     TRISC = 0b00000000;
   547  027B  0187               	clrf	7	;volatile
   548  027C                     l1153:	
   549                           
   550                           ;STEPPER.c: 66:     TRISD = 0b00000000;
   551  027C  0188               	clrf	8	;volatile
   552  027D                     l1155:	
   553                           
   554                           ;STEPPER.c: 67:     TRISE = 0b0000;
   555  027D  0189               	clrf	9	;volatile
   556  027E                     l1157:	
   557                           
   558                           ;STEPPER.c: 68:     ANSEL = 0b00000000;
   559  027E  1683               	bsf	3,5	;RP0=1, select bank3
   560  027F  1703               	bsf	3,6	;RP1=1, select bank3
   561  0280  0188               	clrf	8	;volatile
   562  0281                     l1159:	
   563                           
   564                           ;STEPPER.c: 69:     ANSELH= 0b00000000;
   565  0281  0189               	clrf	9	;volatile
   566  0282                     l1161:	
   567                           
   568                           ;STEPPER.c: 70:     PORTB = 0;
   569  0282  1283               	bcf	3,5	;RP0=0, select bank0
   570  0283  1303               	bcf	3,6	;RP1=0, select bank0
   571  0284  0186               	clrf	6	;volatile
   572  0285                     l1163:	
   573                           
   574                           ;STEPPER.c: 71:     PORTC = 0;
   575  0285  0187               	clrf	7	;volatile
   576  0286                     l1165:	
   577                           
   578                           ;STEPPER.c: 72:     PORTD = 0;
   579  0286  0188               	clrf	8	;volatile
   580  0287                     l1167:	
   581                           
   582                           ;STEPPER.c: 73:     PORTE = 0;
   583  0287  0189               	clrf	9	;volatile
   584  0288                     l1169:	
   585                           
   586                           ;STEPPER.c: 74:     PORTA = 0;
   587  0288  0185               	clrf	5	;volatile
   588  0289                     l1171:	
   589                           
   590                           ;STEPPER.c: 76:     LOOP();
   591  0289  120A  118A  22AB  120A  118A  	fcall	_LOOP
   592  028E                     l67:	
   593  028E  120A  118A  280C   	ljmp	start
   594  0291                     __end_of_main:	
   595                           
   596                           	psect	text1
   597  001A                     __ptext1:	
   598 ;; *************** function _UART_INIT *****************
   599 ;; Defined at:
   600 ;;		line 6 in file "UART.c"
   601 ;; Parameters:    Size  Location     Type
   602 ;;  baudrate        4   14[BANK0 ] const long 
   603 ;; Auto vars:     Size  Location     Type
   604 ;;  x               2    4[COMMON] unsigned int 
   605 ;; Return value:  Size  Location     Type
   606 ;;                  1    wreg      unsigned char 
   607 ;; Registers used:
   608 ;;		wreg, status,2, status,0, pclath, cstack
   609 ;; Tracked objects:
   610 ;;		On entry : 0/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   614 ;;      Params:         0       4       0       0       0
   615 ;;      Locals:         2       0       0       0       0
   616 ;;      Temps:          0      12       0       0       0
   617 ;;      Totals:         2      16       0       0       0
   618 ;;Total ram usage:       18 bytes
   619 ;; Hardware stack levels used:    1
   620 ;; Hardware stack levels required when called:    3
   621 ;; This function calls:
   622 ;;		___aldiv
   623 ;; This function is called by:
   624 ;;		_main
   625 ;; This function uses a non-reentrant model
   626 ;;
   627                           
   628                           
   629                           ;psect for function _UART_INIT
   630  001A                     _UART_INIT:	
   631  001A                     l1103:	
   632                           ;incstack = 0
   633                           ; Regs used in _UART_INIT: [wreg+status,2+status,0+pclath+cstack]
   634                           
   635                           
   636                           ;UART.c: 7:  {;UART.c: 8:   unsigned int x;;UART.c: 9:   x = (8000000 - baudrate*64)/(ba
      +                          udrate*64);
   637  001A  1283               	bcf	3,5	;RP0=0, select bank0
   638  001B  1303               	bcf	3,6	;RP1=0, select bank0
   639  001C  082E               	movf	UART_INIT@baudrate,w
   640  001D  00B2               	movwf	??_UART_INIT
   641  001E  082F               	movf	UART_INIT@baudrate+1,w
   642  001F  00B3               	movwf	??_UART_INIT+1
   643  0020  0830               	movf	UART_INIT@baudrate+2,w
   644  0021  00B4               	movwf	??_UART_INIT+2
   645  0022  0831               	movf	UART_INIT@baudrate+3,w
   646  0023  00B5               	movwf	??_UART_INIT+3
   647  0024  3006               	movlw	6
   648  0025                     u725:	
   649  0025  1003               	clrc
   650  0026  0DB2               	rlf	??_UART_INIT,f
   651  0027  0DB3               	rlf	??_UART_INIT+1,f
   652  0028  0DB4               	rlf	??_UART_INIT+2,f
   653  0029  0DB5               	rlf	??_UART_INIT+3,f
   654  002A                     u720:	
   655  002A  3EFF               	addlw	-1
   656  002B  1D03               	skipz
   657  002C  2825               	goto	u725
   658  002D  0835               	movf	??_UART_INIT+3,w
   659  002E  00A3               	movwf	___aldiv@divisor+3
   660  002F  0834               	movf	??_UART_INIT+2,w
   661  0030  00A2               	movwf	___aldiv@divisor+2
   662  0031  0833               	movf	??_UART_INIT+1,w
   663  0032  00A1               	movwf	___aldiv@divisor+1
   664  0033  0832               	movf	??_UART_INIT,w
   665  0034  00A0               	movwf	___aldiv@divisor
   666  0035  082E               	movf	UART_INIT@baudrate,w
   667  0036  00B6               	movwf	??_UART_INIT+4
   668  0037  082F               	movf	UART_INIT@baudrate+1,w
   669  0038  00B7               	movwf	??_UART_INIT+5
   670  0039  0830               	movf	UART_INIT@baudrate+2,w
   671  003A  00B8               	movwf	??_UART_INIT+6
   672  003B  0831               	movf	UART_INIT@baudrate+3,w
   673  003C  00B9               	movwf	??_UART_INIT+7
   674  003D  3006               	movlw	6
   675  003E                     u735:	
   676  003E  1003               	clrc
   677  003F  0DB6               	rlf	??_UART_INIT+4,f
   678  0040  0DB7               	rlf	??_UART_INIT+5,f
   679  0041  0DB8               	rlf	??_UART_INIT+6,f
   680  0042  0DB9               	rlf	??_UART_INIT+7,f
   681  0043                     u730:	
   682  0043  3EFF               	addlw	-1
   683  0044  1D03               	skipz
   684  0045  283E               	goto	u735
   685  0046  3000               	movlw	0
   686  0047  00BA               	movwf	??_UART_INIT+8
   687  0048  3012               	movlw	18
   688  0049  00BB               	movwf	??_UART_INIT+9
   689  004A  307A               	movlw	122
   690  004B  00BC               	movwf	??_UART_INIT+10
   691  004C  3000               	movlw	0
   692  004D  00BD               	movwf	??_UART_INIT+11
   693  004E  0836               	movf	??_UART_INIT+4,w
   694  004F  02BA               	subwf	??_UART_INIT+8,f
   695  0050  0837               	movf	??_UART_INIT+5,w
   696  0051  1C03               	skipc
   697  0052  0F37               	incfsz	??_UART_INIT+5,w
   698  0053  2855               	goto	u741
   699  0054  2856               	goto	u742
   700  0055                     u741:	
   701  0055  02BB               	subwf	??_UART_INIT+9,f
   702  0056                     u742:	
   703  0056  0838               	movf	??_UART_INIT+6,w
   704  0057  1C03               	skipc
   705  0058  0F38               	incfsz	??_UART_INIT+6,w
   706  0059  285B               	goto	u743
   707  005A  285C               	goto	u744
   708  005B                     u743:	
   709  005B  02BC               	subwf	??_UART_INIT+10,f
   710  005C                     u744:	
   711  005C  0839               	movf	??_UART_INIT+7,w
   712  005D  1C03               	skipc
   713  005E  0F39               	incfsz	??_UART_INIT+7,w
   714  005F  2861               	goto	u745
   715  0060  2862               	goto	u746
   716  0061                     u745:	
   717  0061  02BD               	subwf	??_UART_INIT+11,f
   718  0062                     u746:	
   719  0062  083D               	movf	??_UART_INIT+11,w
   720  0063  00A7               	movwf	___aldiv@dividend+3
   721  0064  083C               	movf	??_UART_INIT+10,w
   722  0065  00A6               	movwf	___aldiv@dividend+2
   723  0066  083B               	movf	??_UART_INIT+9,w
   724  0067  00A5               	movwf	___aldiv@dividend+1
   725  0068  083A               	movf	??_UART_INIT+8,w
   726  0069  00A4               	movwf	___aldiv@dividend
   727  006A  120A  118A  20F6  120A  118A  	fcall	___aldiv
   728  006F  1283               	bcf	3,5	;RP0=0, select bank0
   729  0070  1303               	bcf	3,6	;RP1=0, select bank0
   730  0071  0821               	movf	?___aldiv+1,w
   731  0072  00F5               	movwf	UART_INIT@x+1
   732  0073  0820               	movf	?___aldiv,w
   733  0074  00F4               	movwf	UART_INIT@x
   734  0075                     l1105:	
   735                           
   736                           ;UART.c: 10:   if(x>255)
   737  0075  3001               	movlw	1
   738  0076  0275               	subwf	UART_INIT@x+1,w
   739  0077  3000               	movlw	0
   740  0078  1903               	skipnz
   741  0079  0274               	subwf	UART_INIT@x,w
   742  007A  1C03               	skipc
   743  007B  287D               	goto	u751
   744  007C  287E               	goto	u750
   745  007D                     u751:	
   746  007D  28DA               	goto	l1111
   747  007E                     u750:	
   748  007E                     l1107:	
   749                           
   750                           ;UART.c: 11:   {;UART.c: 12:     x = (8000000 - baudrate*16)/(baudrate*16);
   751  007E  082E               	movf	UART_INIT@baudrate,w
   752  007F  00B2               	movwf	??_UART_INIT
   753  0080  082F               	movf	UART_INIT@baudrate+1,w
   754  0081  00B3               	movwf	??_UART_INIT+1
   755  0082  0830               	movf	UART_INIT@baudrate+2,w
   756  0083  00B4               	movwf	??_UART_INIT+2
   757  0084  0831               	movf	UART_INIT@baudrate+3,w
   758  0085  00B5               	movwf	??_UART_INIT+3
   759  0086  3004               	movlw	4
   760  0087                     u765:	
   761  0087  1003               	clrc
   762  0088  0DB2               	rlf	??_UART_INIT,f
   763  0089  0DB3               	rlf	??_UART_INIT+1,f
   764  008A  0DB4               	rlf	??_UART_INIT+2,f
   765  008B  0DB5               	rlf	??_UART_INIT+3,f
   766  008C                     u760:	
   767  008C  3EFF               	addlw	-1
   768  008D  1D03               	skipz
   769  008E  2887               	goto	u765
   770  008F  0835               	movf	??_UART_INIT+3,w
   771  0090  00A3               	movwf	___aldiv@divisor+3
   772  0091  0834               	movf	??_UART_INIT+2,w
   773  0092  00A2               	movwf	___aldiv@divisor+2
   774  0093  0833               	movf	??_UART_INIT+1,w
   775  0094  00A1               	movwf	___aldiv@divisor+1
   776  0095  0832               	movf	??_UART_INIT,w
   777  0096  00A0               	movwf	___aldiv@divisor
   778  0097  082E               	movf	UART_INIT@baudrate,w
   779  0098  00B6               	movwf	??_UART_INIT+4
   780  0099  082F               	movf	UART_INIT@baudrate+1,w
   781  009A  00B7               	movwf	??_UART_INIT+5
   782  009B  0830               	movf	UART_INIT@baudrate+2,w
   783  009C  00B8               	movwf	??_UART_INIT+6
   784  009D  0831               	movf	UART_INIT@baudrate+3,w
   785  009E  00B9               	movwf	??_UART_INIT+7
   786  009F  3004               	movlw	4
   787  00A0                     u775:	
   788  00A0  1003               	clrc
   789  00A1  0DB6               	rlf	??_UART_INIT+4,f
   790  00A2  0DB7               	rlf	??_UART_INIT+5,f
   791  00A3  0DB8               	rlf	??_UART_INIT+6,f
   792  00A4  0DB9               	rlf	??_UART_INIT+7,f
   793  00A5                     u770:	
   794  00A5  3EFF               	addlw	-1
   795  00A6  1D03               	skipz
   796  00A7  28A0               	goto	u775
   797  00A8  3000               	movlw	0
   798  00A9  00BA               	movwf	??_UART_INIT+8
   799  00AA  3012               	movlw	18
   800  00AB  00BB               	movwf	??_UART_INIT+9
   801  00AC  307A               	movlw	122
   802  00AD  00BC               	movwf	??_UART_INIT+10
   803  00AE  3000               	movlw	0
   804  00AF  00BD               	movwf	??_UART_INIT+11
   805  00B0  0836               	movf	??_UART_INIT+4,w
   806  00B1  02BA               	subwf	??_UART_INIT+8,f
   807  00B2  0837               	movf	??_UART_INIT+5,w
   808  00B3  1C03               	skipc
   809  00B4  0F37               	incfsz	??_UART_INIT+5,w
   810  00B5  28B7               	goto	u781
   811  00B6  28B8               	goto	u782
   812  00B7                     u781:	
   813  00B7  02BB               	subwf	??_UART_INIT+9,f
   814  00B8                     u782:	
   815  00B8  0838               	movf	??_UART_INIT+6,w
   816  00B9  1C03               	skipc
   817  00BA  0F38               	incfsz	??_UART_INIT+6,w
   818  00BB  28BD               	goto	u783
   819  00BC  28BE               	goto	u784
   820  00BD                     u783:	
   821  00BD  02BC               	subwf	??_UART_INIT+10,f
   822  00BE                     u784:	
   823  00BE  0839               	movf	??_UART_INIT+7,w
   824  00BF  1C03               	skipc
   825  00C0  0F39               	incfsz	??_UART_INIT+7,w
   826  00C1  28C3               	goto	u785
   827  00C2  28C4               	goto	u786
   828  00C3                     u785:	
   829  00C3  02BD               	subwf	??_UART_INIT+11,f
   830  00C4                     u786:	
   831  00C4  083D               	movf	??_UART_INIT+11,w
   832  00C5  00A7               	movwf	___aldiv@dividend+3
   833  00C6  083C               	movf	??_UART_INIT+10,w
   834  00C7  00A6               	movwf	___aldiv@dividend+2
   835  00C8  083B               	movf	??_UART_INIT+9,w
   836  00C9  00A5               	movwf	___aldiv@dividend+1
   837  00CA  083A               	movf	??_UART_INIT+8,w
   838  00CB  00A4               	movwf	___aldiv@dividend
   839  00CC  120A  118A  20F6  120A  118A  	fcall	___aldiv
   840  00D1  1283               	bcf	3,5	;RP0=0, select bank0
   841  00D2  1303               	bcf	3,6	;RP1=0, select bank0
   842  00D3  0821               	movf	?___aldiv+1,w
   843  00D4  00F5               	movwf	UART_INIT@x+1
   844  00D5  0820               	movf	?___aldiv,w
   845  00D6  00F4               	movwf	UART_INIT@x
   846  00D7                     l1109:	
   847                           
   848                           ;UART.c: 13:     BRGH = 1;
   849  00D7  1683               	bsf	3,5	;RP0=1, select bank1
   850  00D8  1303               	bcf	3,6	;RP1=0, select bank1
   851  00D9  1518               	bsf	24,2	;volatile
   852  00DA                     l1111:	
   853                           
   854                           ;UART.c: 15:   if(x<256)
   855  00DA  3001               	movlw	1
   856  00DB  0275               	subwf	UART_INIT@x+1,w
   857  00DC  3000               	movlw	0
   858  00DD  1903               	skipnz
   859  00DE  0274               	subwf	UART_INIT@x,w
   860  00DF  1803               	skipnc
   861  00E0  28E2               	goto	u791
   862  00E1  28E3               	goto	u790
   863  00E2                     u791:	
   864  00E2  28F5               	goto	l117
   865  00E3                     u790:	
   866  00E3                     l1113:	
   867                           
   868                           ;UART.c: 16:   {;UART.c: 17:     SPBRG = x;
   869  00E3  0874               	movf	UART_INIT@x,w
   870  00E4  1683               	bsf	3,5	;RP0=1, select bank1
   871  00E5  1303               	bcf	3,6	;RP1=0, select bank1
   872  00E6  0099               	movwf	25	;volatile
   873  00E7                     l1115:	
   874                           
   875                           ;UART.c: 18:     SYNC = 0;
   876  00E7  1218               	bcf	24,4	;volatile
   877  00E8                     l1117:	
   878                           
   879                           ;UART.c: 19:     SPEN = 1;
   880  00E8  1283               	bcf	3,5	;RP0=0, select bank0
   881  00E9  1303               	bcf	3,6	;RP1=0, select bank0
   882  00EA  1798               	bsf	24,7	;volatile
   883  00EB                     l1119:	
   884                           
   885                           ;UART.c: 20:     TRISC7 = 1;
   886  00EB  1683               	bsf	3,5	;RP0=1, select bank1
   887  00EC  1303               	bcf	3,6	;RP1=0, select bank1
   888  00ED  1787               	bsf	7,7	;volatile
   889  00EE                     l1121:	
   890                           
   891                           ;UART.c: 21:     TRISC6 = 1;
   892  00EE  1707               	bsf	7,6	;volatile
   893  00EF                     l1123:	
   894                           
   895                           ;UART.c: 22:     CREN = 1;
   896  00EF  1283               	bcf	3,5	;RP0=0, select bank0
   897  00F0  1303               	bcf	3,6	;RP1=0, select bank0
   898  00F1  1618               	bsf	24,4	;volatile
   899  00F2                     l1125:	
   900                           
   901                           ;UART.c: 23:     TXEN = 1;
   902  00F2  1683               	bsf	3,5	;RP0=1, select bank1
   903  00F3  1303               	bcf	3,6	;RP1=0, select bank1
   904  00F4  1698               	bsf	24,5	;volatile
   905  00F5                     l117:	
   906  00F5  0008               	return
   907  00F6                     __end_of_UART_INIT:	
   908                           
   909                           	psect	text2
   910  00F6                     __ptext2:	
   911 ;; *************** function ___aldiv *****************
   912 ;; Defined at:
   913 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
   914 ;; Parameters:    Size  Location     Type
   915 ;;  divisor         4    0[BANK0 ] long 
   916 ;;  dividend        4    4[BANK0 ] long 
   917 ;; Auto vars:     Size  Location     Type
   918 ;;  quotient        4   10[BANK0 ] long 
   919 ;;  sign            1    9[BANK0 ] unsigned char 
   920 ;;  counter         1    8[BANK0 ] unsigned char 
   921 ;; Return value:  Size  Location     Type
   922 ;;                  4    0[BANK0 ] long 
   923 ;; Registers used:
   924 ;;		wreg, status,2, status,0
   925 ;; Tracked objects:
   926 ;;		On entry : 0/0
   927 ;;		On exit  : 0/0
   928 ;;		Unchanged: 0/0
   929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   930 ;;      Params:         0       8       0       0       0
   931 ;;      Locals:         0       6       0       0       0
   932 ;;      Temps:          1       0       0       0       0
   933 ;;      Totals:         1      14       0       0       0
   934 ;;Total ram usage:       15 bytes
   935 ;; Hardware stack levels used:    1
   936 ;; Hardware stack levels required when called:    2
   937 ;; This function calls:
   938 ;;		Nothing
   939 ;; This function is called by:
   940 ;;		_UART_INIT
   941 ;; This function uses a non-reentrant model
   942 ;;
   943                           
   944                           
   945                           ;psect for function ___aldiv
   946  00F6                     ___aldiv:	
   947  00F6                     l1063:	
   948                           ;incstack = 0
   949                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
   950                           
   951  00F6  1283               	bcf	3,5	;RP0=0, select bank0
   952  00F7  1303               	bcf	3,6	;RP1=0, select bank0
   953  00F8  01A9               	clrf	___aldiv@sign
   954  00F9                     l1065:	
   955  00F9  1FA3               	btfss	___aldiv@divisor+3,7
   956  00FA  28FC               	goto	u621
   957  00FB  28FD               	goto	u620
   958  00FC                     u621:	
   959  00FC  290A               	goto	l280
   960  00FD                     u620:	
   961  00FD                     l1067:	
   962  00FD  09A0               	comf	___aldiv@divisor,f
   963  00FE  09A1               	comf	___aldiv@divisor+1,f
   964  00FF  09A2               	comf	___aldiv@divisor+2,f
   965  0100  09A3               	comf	___aldiv@divisor+3,f
   966  0101  0AA0               	incf	___aldiv@divisor,f
   967  0102  1903               	skipnz
   968  0103  0AA1               	incf	___aldiv@divisor+1,f
   969  0104  1903               	skipnz
   970  0105  0AA2               	incf	___aldiv@divisor+2,f
   971  0106  1903               	skipnz
   972  0107  0AA3               	incf	___aldiv@divisor+3,f
   973  0108  01A9               	clrf	___aldiv@sign
   974  0109  0AA9               	incf	___aldiv@sign,f
   975  010A                     l280:	
   976  010A  1FA7               	btfss	___aldiv@dividend+3,7
   977  010B  290D               	goto	u631
   978  010C  290E               	goto	u630
   979  010D                     u631:	
   980  010D  291D               	goto	l1073
   981  010E                     u630:	
   982  010E                     l1069:	
   983  010E  09A4               	comf	___aldiv@dividend,f
   984  010F  09A5               	comf	___aldiv@dividend+1,f
   985  0110  09A6               	comf	___aldiv@dividend+2,f
   986  0111  09A7               	comf	___aldiv@dividend+3,f
   987  0112  0AA4               	incf	___aldiv@dividend,f
   988  0113  1903               	skipnz
   989  0114  0AA5               	incf	___aldiv@dividend+1,f
   990  0115  1903               	skipnz
   991  0116  0AA6               	incf	___aldiv@dividend+2,f
   992  0117  1903               	skipnz
   993  0118  0AA7               	incf	___aldiv@dividend+3,f
   994  0119                     l1071:	
   995  0119  3001               	movlw	1
   996  011A  00F3               	movwf	??___aldiv
   997  011B  0873               	movf	??___aldiv,w
   998  011C  06A9               	xorwf	___aldiv@sign,f
   999  011D                     l1073:	
  1000  011D  3000               	movlw	0
  1001  011E  00AD               	movwf	___aldiv@quotient+3
  1002  011F  3000               	movlw	0
  1003  0120  00AC               	movwf	___aldiv@quotient+2
  1004  0121  3000               	movlw	0
  1005  0122  00AB               	movwf	___aldiv@quotient+1
  1006  0123  3000               	movlw	0
  1007  0124  00AA               	movwf	___aldiv@quotient
  1008  0125                     l1075:	
  1009  0125  0823               	movf	___aldiv@divisor+3,w
  1010  0126  0422               	iorwf	___aldiv@divisor+2,w
  1011  0127  0421               	iorwf	___aldiv@divisor+1,w
  1012  0128  0420               	iorwf	___aldiv@divisor,w
  1013  0129  1903               	skipnz
  1014  012A  292C               	goto	u641
  1015  012B  292D               	goto	u640
  1016  012C                     u641:	
  1017  012C  297A               	goto	l1095
  1018  012D                     u640:	
  1019  012D                     l1077:	
  1020  012D  01A8               	clrf	___aldiv@counter
  1021  012E  0AA8               	incf	___aldiv@counter,f
  1022  012F  293D               	goto	l1081
  1023  0130                     l1079:	
  1024  0130  3001               	movlw	1
  1025  0131  00F3               	movwf	??___aldiv
  1026  0132                     u655:	
  1027  0132  1003               	clrc
  1028  0133  0DA0               	rlf	___aldiv@divisor,f
  1029  0134  0DA1               	rlf	___aldiv@divisor+1,f
  1030  0135  0DA2               	rlf	___aldiv@divisor+2,f
  1031  0136  0DA3               	rlf	___aldiv@divisor+3,f
  1032  0137  0BF3               	decfsz	??___aldiv,f
  1033  0138  2932               	goto	u655
  1034  0139  3001               	movlw	1
  1035  013A  00F3               	movwf	??___aldiv
  1036  013B  0873               	movf	??___aldiv,w
  1037  013C  07A8               	addwf	___aldiv@counter,f
  1038  013D                     l1081:	
  1039  013D  1FA3               	btfss	___aldiv@divisor+3,7
  1040  013E  2940               	goto	u661
  1041  013F  2941               	goto	u660
  1042  0140                     u661:	
  1043  0140  2930               	goto	l1079
  1044  0141                     u660:	
  1045  0141                     l1083:	
  1046  0141  3001               	movlw	1
  1047  0142  00F3               	movwf	??___aldiv
  1048  0143                     u675:	
  1049  0143  1003               	clrc
  1050  0144  0DAA               	rlf	___aldiv@quotient,f
  1051  0145  0DAB               	rlf	___aldiv@quotient+1,f
  1052  0146  0DAC               	rlf	___aldiv@quotient+2,f
  1053  0147  0DAD               	rlf	___aldiv@quotient+3,f
  1054  0148  0BF3               	decfsz	??___aldiv,f
  1055  0149  2943               	goto	u675
  1056  014A                     l1085:	
  1057  014A  0823               	movf	___aldiv@divisor+3,w
  1058  014B  0227               	subwf	___aldiv@dividend+3,w
  1059  014C  1D03               	skipz
  1060  014D  2958               	goto	u685
  1061  014E  0822               	movf	___aldiv@divisor+2,w
  1062  014F  0226               	subwf	___aldiv@dividend+2,w
  1063  0150  1D03               	skipz
  1064  0151  2958               	goto	u685
  1065  0152  0821               	movf	___aldiv@divisor+1,w
  1066  0153  0225               	subwf	___aldiv@dividend+1,w
  1067  0154  1D03               	skipz
  1068  0155  2958               	goto	u685
  1069  0156  0820               	movf	___aldiv@divisor,w
  1070  0157  0224               	subwf	___aldiv@dividend,w
  1071  0158                     u685:	
  1072  0158  1C03               	skipc
  1073  0159  295B               	goto	u681
  1074  015A  295C               	goto	u680
  1075  015B                     u681:	
  1076  015B  296B               	goto	l1091
  1077  015C                     u680:	
  1078  015C                     l1087:	
  1079  015C  0820               	movf	___aldiv@divisor,w
  1080  015D  02A4               	subwf	___aldiv@dividend,f
  1081  015E  0821               	movf	___aldiv@divisor+1,w
  1082  015F  1C03               	skipc
  1083  0160  0F21               	incfsz	___aldiv@divisor+1,w
  1084  0161  02A5               	subwf	___aldiv@dividend+1,f
  1085  0162  0822               	movf	___aldiv@divisor+2,w
  1086  0163  1C03               	skipc
  1087  0164  0F22               	incfsz	___aldiv@divisor+2,w
  1088  0165  02A6               	subwf	___aldiv@dividend+2,f
  1089  0166  0823               	movf	___aldiv@divisor+3,w
  1090  0167  1C03               	skipc
  1091  0168  0F23               	incfsz	___aldiv@divisor+3,w
  1092  0169  02A7               	subwf	___aldiv@dividend+3,f
  1093  016A                     l1089:	
  1094  016A  142A               	bsf	___aldiv@quotient,0
  1095  016B                     l1091:	
  1096  016B  3001               	movlw	1
  1097  016C                     u695:	
  1098  016C  1003               	clrc
  1099  016D  0CA3               	rrf	___aldiv@divisor+3,f
  1100  016E  0CA2               	rrf	___aldiv@divisor+2,f
  1101  016F  0CA1               	rrf	___aldiv@divisor+1,f
  1102  0170  0CA0               	rrf	___aldiv@divisor,f
  1103  0171  3EFF               	addlw	-1
  1104  0172  1D03               	skipz
  1105  0173  296C               	goto	u695
  1106  0174                     l1093:	
  1107  0174  3001               	movlw	1
  1108  0175  02A8               	subwf	___aldiv@counter,f
  1109  0176  1D03               	btfss	3,2
  1110  0177  2979               	goto	u701
  1111  0178  297A               	goto	u700
  1112  0179                     u701:	
  1113  0179  2941               	goto	l1083
  1114  017A                     u700:	
  1115  017A                     l1095:	
  1116  017A  0829               	movf	___aldiv@sign,w
  1117  017B  1903               	btfsc	3,2
  1118  017C  297E               	goto	u711
  1119  017D  297F               	goto	u710
  1120  017E                     u711:	
  1121  017E  298A               	goto	l1099
  1122  017F                     u710:	
  1123  017F                     l1097:	
  1124  017F  09AA               	comf	___aldiv@quotient,f
  1125  0180  09AB               	comf	___aldiv@quotient+1,f
  1126  0181  09AC               	comf	___aldiv@quotient+2,f
  1127  0182  09AD               	comf	___aldiv@quotient+3,f
  1128  0183  0AAA               	incf	___aldiv@quotient,f
  1129  0184  1903               	skipnz
  1130  0185  0AAB               	incf	___aldiv@quotient+1,f
  1131  0186  1903               	skipnz
  1132  0187  0AAC               	incf	___aldiv@quotient+2,f
  1133  0188  1903               	skipnz
  1134  0189  0AAD               	incf	___aldiv@quotient+3,f
  1135  018A                     l1099:	
  1136  018A  082D               	movf	___aldiv@quotient+3,w
  1137  018B  00A3               	movwf	?___aldiv+3
  1138  018C  082C               	movf	___aldiv@quotient+2,w
  1139  018D  00A2               	movwf	?___aldiv+2
  1140  018E  082B               	movf	___aldiv@quotient+1,w
  1141  018F  00A1               	movwf	?___aldiv+1
  1142  0190  082A               	movf	___aldiv@quotient,w
  1143  0191  00A0               	movwf	?___aldiv
  1144  0192                     l290:	
  1145  0192  0008               	return
  1146  0193                     __end_of___aldiv:	
  1147                           
  1148                           	psect	text3
  1149  02AB                     __ptext3:	
  1150 ;; *************** function _LOOP *****************
  1151 ;; Defined at:
  1152 ;;		line 83 in file "STEPPER.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;		None
  1155 ;; Auto vars:     Size  Location     Type
  1156 ;;		None
  1157 ;; Return value:  Size  Location     Type
  1158 ;;                  1    wreg      void 
  1159 ;; Registers used:
  1160 ;;		wreg, status,2, status,0, pclath, cstack
  1161 ;; Tracked objects:
  1162 ;;		On entry : 0/0
  1163 ;;		On exit  : 0/0
  1164 ;;		Unchanged: 0/0
  1165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1166 ;;      Params:         0       0       0       0       0
  1167 ;;      Locals:         0       0       0       0       0
  1168 ;;      Temps:          2       0       0       0       0
  1169 ;;      Totals:         2       0       0       0       0
  1170 ;;Total ram usage:        2 bytes
  1171 ;; Hardware stack levels used:    1
  1172 ;; Hardware stack levels required when called:    3
  1173 ;; This function calls:
  1174 ;;		_Abrir
  1175 ;;		_Cerrar
  1176 ;; This function is called by:
  1177 ;;		_main
  1178 ;; This function uses a non-reentrant model
  1179 ;;
  1180                           
  1181                           
  1182                           ;psect for function _LOOP
  1183  02AB                     _LOOP:	
  1184  02AB                     l70:	
  1185                           ;incstack = 0
  1186                           ; Regs used in _LOOP: [wreg+status,2+status,0+pclath+cstack]
  1187                           ;STEPPER.c: 84:     while(1){
  1188                           
  1189  02AB                     l1013:	
  1190                           
  1191                           ;STEPPER.c: 87:     Abrir();
  1192  02AB  120A  118A  2207  120A  118A  	fcall	_Abrir
  1193  02B0                     l1015:	
  1194                           
  1195                           ;STEPPER.c: 88:     _delay((unsigned long)((5)*(8000000/4000.0)));
  1196  02B0  300D               	movlw	13
  1197  02B1  00F6               	movwf	??_LOOP+1
  1198  02B2  30FB               	movlw	251
  1199  02B3  00F5               	movwf	??_LOOP
  1200  02B4                     u807:	
  1201  02B4  0BF5               	decfsz	??_LOOP,f
  1202  02B5  2AB4               	goto	u807
  1203  02B6  0BF6               	decfsz	??_LOOP+1,f
  1204  02B7  2AB4               	goto	u807
  1205  02B8  2AB9               	nop2
  1206  02B9                     l1017:	
  1207                           
  1208                           ;STEPPER.c: 89:     Cerrar();
  1209  02B9  120A  118A  2193  120A  118A  	fcall	_Cerrar
  1210  02BE  2AAB               	goto	l70
  1211  02BF  0008               	return
  1212  02C0                     __end_of_LOOP:	
  1213                           
  1214                           	psect	text4
  1215  0193                     __ptext4:	
  1216 ;; *************** function _Cerrar *****************
  1217 ;; Defined at:
  1218 ;;		line 124 in file "STEPPER.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;		None
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;		None
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  1    wreg      void 
  1225 ;; Registers used:
  1226 ;;		wreg, status,2, status,0
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1232 ;;      Params:         0       0       0       0       0
  1233 ;;      Locals:         0       0       0       0       0
  1234 ;;      Temps:          2       0       0       0       0
  1235 ;;      Totals:         2       0       0       0       0
  1236 ;;Total ram usage:        2 bytes
  1237 ;; Hardware stack levels used:    1
  1238 ;; Hardware stack levels required when called:    2
  1239 ;; This function calls:
  1240 ;;		Nothing
  1241 ;; This function is called by:
  1242 ;;		_LOOP
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           
  1247                           ;psect for function _Cerrar
  1248  0193                     _Cerrar:	
  1249  0193                     l913:	
  1250                           ;incstack = 0
  1251                           ; Regs used in _Cerrar: [wreg+status,2+status,0]
  1252                           
  1253                           
  1254                           ;STEPPER.c: 125:     if (P1==0 && S0==1 && RA0==1){
  1255  0193  0877               	movf	_P1,w
  1256  0194  1D03               	btfss	3,2
  1257  0195  2997               	goto	u351
  1258  0196  2998               	goto	u350
  1259  0197                     u351:	
  1260  0197  29A5               	goto	l921
  1261  0198                     u350:	
  1262  0198                     l915:	
  1263  0198  0379               	decf	_S0,w
  1264  0199  1D03               	btfss	3,2
  1265  019A  299C               	goto	u361
  1266  019B  299D               	goto	u360
  1267  019C                     u361:	
  1268  019C  29A5               	goto	l921
  1269  019D                     u360:	
  1270  019D                     l917:	
  1271  019D  1283               	bcf	3,5	;RP0=0, select bank0
  1272  019E  1303               	bcf	3,6	;RP1=0, select bank0
  1273  019F  1C05               	btfss	5,0	;volatile
  1274  01A0  29A2               	goto	u371
  1275  01A1  29A3               	goto	u370
  1276  01A2                     u371:	
  1277  01A2  29A5               	goto	l921
  1278  01A3                     u370:	
  1279  01A3                     l919:	
  1280                           
  1281                           ;STEPPER.c: 126:         S1=1;
  1282  01A3  01BF               	clrf	_S1
  1283  01A4  0ABF               	incf	_S1,f
  1284  01A5                     l921:	
  1285                           
  1286                           ;STEPPER.c: 128:     if (P1==0 && S0==1 && S1==1 && RA0==0){
  1287  01A5  0877               	movf	_P1,w
  1288  01A6  1D03               	btfss	3,2
  1289  01A7  29A9               	goto	u381
  1290  01A8  29AA               	goto	u380
  1291  01A9                     u381:	
  1292  01A9  2A06               	goto	l88
  1293  01AA                     u380:	
  1294  01AA                     l923:	
  1295  01AA  0379               	decf	_S0,w
  1296  01AB  1D03               	btfss	3,2
  1297  01AC  29AE               	goto	u391
  1298  01AD  29AF               	goto	u390
  1299  01AE                     u391:	
  1300  01AE  2A06               	goto	l88
  1301  01AF                     u390:	
  1302  01AF                     l925:	
  1303  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  1304  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  1305  01B1  033F               	decf	_S1,w
  1306  01B2  1D03               	btfss	3,2
  1307  01B3  29B5               	goto	u401
  1308  01B4  29B6               	goto	u400
  1309  01B5                     u401:	
  1310  01B5  2A06               	goto	l88
  1311  01B6                     u400:	
  1312  01B6                     l927:	
  1313  01B6  1805               	btfsc	5,0	;volatile
  1314  01B7  29B9               	goto	u411
  1315  01B8  29BA               	goto	u410
  1316  01B9                     u411:	
  1317  01B9  2A06               	goto	l88
  1318  01BA                     u410:	
  1319  01BA                     l929:	
  1320                           
  1321                           ;STEPPER.c: 129:         for (i=0; i<=128;i++){
  1322  01BA  01F8               	clrf	_i
  1323  01BB                     l931:	
  1324  01BB  3081               	movlw	129
  1325  01BC  0278               	subwf	_i,w
  1326  01BD  1C03               	skipc
  1327  01BE  29C0               	goto	u421
  1328  01BF  29C1               	goto	u420
  1329  01C0                     u421:	
  1330  01C0  29C2               	goto	l935
  1331  01C1                     u420:	
  1332  01C1  2A01               	goto	l943
  1333  01C2                     l935:	
  1334                           
  1335                           ;STEPPER.c: 130:             if (i<=128){
  1336  01C2  3081               	movlw	129
  1337  01C3  0278               	subwf	_i,w
  1338  01C4  1803               	skipnc
  1339  01C5  29C7               	goto	u431
  1340  01C6  29C8               	goto	u430
  1341  01C7                     u431:	
  1342  01C7  29FC               	goto	l939
  1343  01C8                     u430:	
  1344  01C8                     l937:	
  1345                           
  1346                           ;STEPPER.c: 131:                 PORTB = 0b00001000;
  1347  01C8  3008               	movlw	8
  1348  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  1349  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  1350  01CB  0086               	movwf	6	;volatile
  1351                           
  1352                           ;STEPPER.c: 132:                 _delay((unsigned long)((2)*(8000000/4000.0)));
  1353  01CC  3006               	movlw	6
  1354  01CD  00F4               	movwf	??_Cerrar+1
  1355  01CE  3030               	movlw	48
  1356  01CF  00F3               	movwf	??_Cerrar
  1357  01D0                     u817:	
  1358  01D0  0BF3               	decfsz	??_Cerrar,f
  1359  01D1  29D0               	goto	u817
  1360  01D2  0BF4               	decfsz	??_Cerrar+1,f
  1361  01D3  29D0               	goto	u817
  1362  01D4  0000               	nop
  1363                           
  1364                           ;STEPPER.c: 133:                 PORTB = 0b00000100;
  1365  01D5  3004               	movlw	4
  1366  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  1367  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  1368  01D8  0086               	movwf	6	;volatile
  1369                           
  1370                           ;STEPPER.c: 134:                 _delay((unsigned long)((2)*(8000000/4000.0)));
  1371  01D9  3006               	movlw	6
  1372  01DA  00F4               	movwf	??_Cerrar+1
  1373  01DB  3030               	movlw	48
  1374  01DC  00F3               	movwf	??_Cerrar
  1375  01DD                     u827:	
  1376  01DD  0BF3               	decfsz	??_Cerrar,f
  1377  01DE  29DD               	goto	u827
  1378  01DF  0BF4               	decfsz	??_Cerrar+1,f
  1379  01E0  29DD               	goto	u827
  1380  01E1  0000               	nop
  1381                           
  1382                           ;STEPPER.c: 135:                 PORTB = 0b00000010;
  1383  01E2  3002               	movlw	2
  1384  01E3  1283               	bcf	3,5	;RP0=0, select bank0
  1385  01E4  1303               	bcf	3,6	;RP1=0, select bank0
  1386  01E5  0086               	movwf	6	;volatile
  1387                           
  1388                           ;STEPPER.c: 136:                 _delay((unsigned long)((2)*(8000000/4000.0)));
  1389  01E6  3006               	movlw	6
  1390  01E7  00F4               	movwf	??_Cerrar+1
  1391  01E8  3030               	movlw	48
  1392  01E9  00F3               	movwf	??_Cerrar
  1393  01EA                     u837:	
  1394  01EA  0BF3               	decfsz	??_Cerrar,f
  1395  01EB  29EA               	goto	u837
  1396  01EC  0BF4               	decfsz	??_Cerrar+1,f
  1397  01ED  29EA               	goto	u837
  1398  01EE  0000               	nop
  1399                           
  1400                           ;STEPPER.c: 137:                 PORTB = 0b00000001;
  1401  01EF  3001               	movlw	1
  1402  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  1403  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  1404  01F2  0086               	movwf	6	;volatile
  1405                           
  1406                           ;STEPPER.c: 138:                 _delay((unsigned long)((2)*(8000000/4000.0)));
  1407  01F3  3006               	movlw	6
  1408  01F4  00F4               	movwf	??_Cerrar+1
  1409  01F5  3030               	movlw	48
  1410  01F6  00F3               	movwf	??_Cerrar
  1411  01F7                     u847:	
  1412  01F7  0BF3               	decfsz	??_Cerrar,f
  1413  01F8  29F7               	goto	u847
  1414  01F9  0BF4               	decfsz	??_Cerrar+1,f
  1415  01FA  29F7               	goto	u847
  1416  01FB  0000               	nop
  1417  01FC                     l939:	
  1418                           
  1419                           ;STEPPER.c: 140:         }
  1420  01FC  3001               	movlw	1
  1421  01FD  00F3               	movwf	??_Cerrar
  1422  01FE  0873               	movf	??_Cerrar,w
  1423  01FF  07F8               	addwf	_i,f
  1424  0200  29BB               	goto	l931
  1425  0201                     l943:	
  1426                           
  1427                           ;STEPPER.c: 141:         S1=0;
  1428  0201  1283               	bcf	3,5	;RP0=0, select bank0
  1429  0202  1303               	bcf	3,6	;RP1=0, select bank0
  1430  0203  01BF               	clrf	_S1
  1431                           
  1432                           ;STEPPER.c: 142:         S0=0;
  1433  0204  01F9               	clrf	_S0
  1434                           
  1435                           ;STEPPER.c: 143:         i=0;
  1436  0205  01F8               	clrf	_i
  1437  0206                     l88:	
  1438  0206  0008               	return
  1439  0207                     __end_of_Cerrar:	
  1440                           
  1441                           	psect	text5
  1442  0207                     __ptext5:	
  1443 ;; *************** function _Abrir *****************
  1444 ;; Defined at:
  1445 ;;		line 104 in file "STEPPER.c"
  1446 ;; Parameters:    Size  Location     Type
  1447 ;;		None
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;		None
  1450 ;; Return value:  Size  Location     Type
  1451 ;;                  1    wreg      void 
  1452 ;; Registers used:
  1453 ;;		wreg, status,2, status,0
  1454 ;; Tracked objects:
  1455 ;;		On entry : 0/0
  1456 ;;		On exit  : 0/0
  1457 ;;		Unchanged: 0/0
  1458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1459 ;;      Params:         0       0       0       0       0
  1460 ;;      Locals:         0       0       0       0       0
  1461 ;;      Temps:          2       0       0       0       0
  1462 ;;      Totals:         2       0       0       0       0
  1463 ;;Total ram usage:        2 bytes
  1464 ;; Hardware stack levels used:    1
  1465 ;; Hardware stack levels required when called:    2
  1466 ;; This function calls:
  1467 ;;		Nothing
  1468 ;; This function is called by:
  1469 ;;		_LOOP
  1470 ;; This function uses a non-reentrant model
  1471 ;;
  1472                           
  1473                           
  1474                           ;psect for function _Abrir
  1475  0207                     _Abrir:	
  1476  0207                     l721:	
  1477                           ;incstack = 0
  1478                           ; Regs used in _Abrir: [wreg+status,2+status,0]
  1479                           
  1480                           
  1481                           ;STEPPER.c: 105:     if (P1 == 1 && S0 == 0){
  1482  0207  0377               	decf	_P1,w
  1483  0208  1D03               	btfss	3,2
  1484  0209  2A0B               	goto	u11
  1485  020A  2A0C               	goto	u10
  1486  020B                     u11:	
  1487  020B  2A5B               	goto	l80
  1488  020C                     u10:	
  1489  020C                     l723:	
  1490  020C  0879               	movf	_S0,w
  1491  020D  1D03               	btfss	3,2
  1492  020E  2A10               	goto	u21
  1493  020F  2A11               	goto	u20
  1494  0210                     u21:	
  1495  0210  2A5B               	goto	l80
  1496  0211                     u20:	
  1497  0211                     l725:	
  1498                           
  1499                           ;STEPPER.c: 106:         for (i=0; i<=128;i++){
  1500  0211  01F8               	clrf	_i
  1501  0212                     l727:	
  1502  0212  3081               	movlw	129
  1503  0213  0278               	subwf	_i,w
  1504  0214  1C03               	skipc
  1505  0215  2A17               	goto	u31
  1506  0216  2A18               	goto	u30
  1507  0217                     u31:	
  1508  0217  2A19               	goto	l731
  1509  0218                     u30:	
  1510  0218  2A58               	goto	l78
  1511  0219                     l731:	
  1512                           
  1513                           ;STEPPER.c: 107:             if (i<=128){
  1514  0219  3081               	movlw	129
  1515  021A  0278               	subwf	_i,w
  1516  021B  1803               	skipnc
  1517  021C  2A1E               	goto	u41
  1518  021D  2A1F               	goto	u40
  1519  021E                     u41:	
  1520  021E  2A53               	goto	l735
  1521  021F                     u40:	
  1522  021F                     l733:	
  1523                           
  1524                           ;STEPPER.c: 108:                 PORTB = 0b00000001;
  1525  021F  3001               	movlw	1
  1526  0220  1283               	bcf	3,5	;RP0=0, select bank0
  1527  0221  1303               	bcf	3,6	;RP1=0, select bank0
  1528  0222  0086               	movwf	6	;volatile
  1529                           
  1530                           ;STEPPER.c: 109:                 _delay((unsigned long)((2)*(8000000/4000.0)));
  1531  0223  3006               	movlw	6
  1532  0224  00F4               	movwf	??_Abrir+1
  1533  0225  3030               	movlw	48
  1534  0226  00F3               	movwf	??_Abrir
  1535  0227                     u857:	
  1536  0227  0BF3               	decfsz	??_Abrir,f
  1537  0228  2A27               	goto	u857
  1538  0229  0BF4               	decfsz	??_Abrir+1,f
  1539  022A  2A27               	goto	u857
  1540  022B  0000               	nop
  1541                           
  1542                           ;STEPPER.c: 110:                 PORTB = 0b00000010;
  1543  022C  3002               	movlw	2
  1544  022D  1283               	bcf	3,5	;RP0=0, select bank0
  1545  022E  1303               	bcf	3,6	;RP1=0, select bank0
  1546  022F  0086               	movwf	6	;volatile
  1547                           
  1548                           ;STEPPER.c: 111:                 _delay((unsigned long)((2)*(8000000/4000.0)));
  1549  0230  3006               	movlw	6
  1550  0231  00F4               	movwf	??_Abrir+1
  1551  0232  3030               	movlw	48
  1552  0233  00F3               	movwf	??_Abrir
  1553  0234                     u867:	
  1554  0234  0BF3               	decfsz	??_Abrir,f
  1555  0235  2A34               	goto	u867
  1556  0236  0BF4               	decfsz	??_Abrir+1,f
  1557  0237  2A34               	goto	u867
  1558  0238  0000               	nop
  1559                           
  1560                           ;STEPPER.c: 112:                 PORTB = 0b00000100;
  1561  0239  3004               	movlw	4
  1562  023A  1283               	bcf	3,5	;RP0=0, select bank0
  1563  023B  1303               	bcf	3,6	;RP1=0, select bank0
  1564  023C  0086               	movwf	6	;volatile
  1565                           
  1566                           ;STEPPER.c: 113:                 _delay((unsigned long)((2)*(8000000/4000.0)));
  1567  023D  3006               	movlw	6
  1568  023E  00F4               	movwf	??_Abrir+1
  1569  023F  3030               	movlw	48
  1570  0240  00F3               	movwf	??_Abrir
  1571  0241                     u877:	
  1572  0241  0BF3               	decfsz	??_Abrir,f
  1573  0242  2A41               	goto	u877
  1574  0243  0BF4               	decfsz	??_Abrir+1,f
  1575  0244  2A41               	goto	u877
  1576  0245  0000               	nop
  1577                           
  1578                           ;STEPPER.c: 114:                 PORTB = 0b00001000;
  1579  0246  3008               	movlw	8
  1580  0247  1283               	bcf	3,5	;RP0=0, select bank0
  1581  0248  1303               	bcf	3,6	;RP1=0, select bank0
  1582  0249  0086               	movwf	6	;volatile
  1583                           
  1584                           ;STEPPER.c: 115:                 _delay((unsigned long)((2)*(8000000/4000.0)));
  1585  024A  3006               	movlw	6
  1586  024B  00F4               	movwf	??_Abrir+1
  1587  024C  3030               	movlw	48
  1588  024D  00F3               	movwf	??_Abrir
  1589  024E                     u887:	
  1590  024E  0BF3               	decfsz	??_Abrir,f
  1591  024F  2A4E               	goto	u887
  1592  0250  0BF4               	decfsz	??_Abrir+1,f
  1593  0251  2A4E               	goto	u887
  1594  0252  0000               	nop
  1595  0253                     l735:	
  1596                           
  1597                           ;STEPPER.c: 117:         }
  1598  0253  3001               	movlw	1
  1599  0254  00F3               	movwf	??_Abrir
  1600  0255  0873               	movf	??_Abrir,w
  1601  0256  07F8               	addwf	_i,f
  1602  0257  2A12               	goto	l727
  1603  0258                     l78:	
  1604                           
  1605                           ;STEPPER.c: 118:         S0=1;
  1606  0258  01F9               	clrf	_S0
  1607  0259  0AF9               	incf	_S0,f
  1608  025A                     l739:	
  1609                           
  1610                           ;STEPPER.c: 119:         i=0;
  1611  025A  01F8               	clrf	_i
  1612  025B                     l80:	
  1613  025B  0008               	return
  1614  025C                     __end_of_Abrir:	
  1615                           
  1616                           	psect	text6
  1617  0291                     __ptext6:	
  1618 ;; *************** function _ISR *****************
  1619 ;; Defined at:
  1620 ;;		line 44 in file "STEPPER.c"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;		None
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;		None
  1625 ;; Return value:  Size  Location     Type
  1626 ;;                  1    wreg      void 
  1627 ;; Registers used:
  1628 ;;		wreg, pclath, cstack
  1629 ;; Tracked objects:
  1630 ;;		On entry : 0/0
  1631 ;;		On exit  : 0/0
  1632 ;;		Unchanged: 0/0
  1633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1634 ;;      Params:         0       0       0       0       0
  1635 ;;      Locals:         0       0       0       0       0
  1636 ;;      Temps:          3       0       0       0       0
  1637 ;;      Totals:         3       0       0       0       0
  1638 ;;Total ram usage:        3 bytes
  1639 ;; Hardware stack levels used:    1
  1640 ;; Hardware stack levels required when called:    1
  1641 ;; This function calls:
  1642 ;;		_UART_READ
  1643 ;; This function is called by:
  1644 ;;		Interrupt level 1
  1645 ;; This function uses a non-reentrant model
  1646 ;;
  1647                           
  1648                           
  1649                           ;psect for function _ISR
  1650  0291                     _ISR:	
  1651  0291                     i1l855:	
  1652                           
  1653                           ;STEPPER.c: 45:     if(PIR1bits.RCIF==1){
  1654  0291  1283               	bcf	3,5	;RP0=0, select bank0
  1655  0292  1303               	bcf	3,6	;RP1=0, select bank0
  1656  0293  1E8C               	btfss	12,5	;volatile
  1657  0294  2A96               	goto	u33_21
  1658  0295  2A97               	goto	u33_20
  1659  0296                     u33_21:	
  1660  0296  2AA4               	goto	i1l62
  1661  0297                     u33_20:	
  1662  0297                     i1l857:	
  1663                           
  1664                           ;STEPPER.c: 46:         PORTE = UART_READ();
  1665  0297  120A  118A  22C0  120A  118A  	fcall	_UART_READ
  1666  029C  1283               	bcf	3,5	;RP0=0, select bank0
  1667  029D  1303               	bcf	3,6	;RP1=0, select bank0
  1668  029E  0089               	movwf	9	;volatile
  1669  029F                     i1l859:	
  1670                           
  1671                           ;STEPPER.c: 47:         P1=PORTE;
  1672  029F  0809               	movf	9,w	;volatile
  1673  02A0  00F0               	movwf	??_ISR
  1674  02A1  0870               	movf	??_ISR,w
  1675  02A2  00F7               	movwf	_P1
  1676  02A3                     i1l861:	
  1677                           
  1678                           ;STEPPER.c: 48:         PIR1bits.RCIF=0;
  1679  02A3  128C               	bcf	12,5	;volatile
  1680  02A4                     i1l62:	
  1681  02A4  0872               	movf	??_ISR+2,w
  1682  02A5  008A               	movwf	10
  1683  02A6  0E71               	swapf	(??_ISR+1)^(0+4294967168),w
  1684  02A7  0083               	movwf	3
  1685  02A8  0EFE               	swapf	btemp,f
  1686  02A9  0E7E               	swapf	btemp,w
  1687  02AA  0009               	retfie
  1688  02AB                     __end_of_ISR:	
  1689                           
  1690                           	psect	intentry
  1691  0004                     __pintentry:	
  1692                           ;incstack = 0
  1693                           ; Regs used in _ISR: [wreg+pclath+cstack]
  1694                           
  1695  0004                     interrupt_function:	
  1696  007E                     saved_w	set	btemp
  1697  0004  00FE               	movwf	btemp
  1698  0005  0E03               	swapf	3,w
  1699  0006  00F1               	movwf	??_ISR+1
  1700  0007  080A               	movf	10,w
  1701  0008  00F2               	movwf	??_ISR+2
  1702  0009  120A  118A  2A91   	ljmp	_ISR
  1703                           
  1704                           	psect	text7
  1705  02C0                     __ptext7:	
  1706 ;; *************** function _UART_READ *****************
  1707 ;; Defined at:
  1708 ;;		line 35 in file "UART.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;		None
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;		None
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  1    wreg      unsigned char 
  1715 ;; Registers used:
  1716 ;;		wreg
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1722 ;;      Params:         0       0       0       0       0
  1723 ;;      Locals:         0       0       0       0       0
  1724 ;;      Temps:          0       0       0       0       0
  1725 ;;      Totals:         0       0       0       0       0
  1726 ;;Total ram usage:        0 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; This function calls:
  1729 ;;		Nothing
  1730 ;; This function is called by:
  1731 ;;		_ISR
  1732 ;; This function uses a non-reentrant model
  1733 ;;
  1734                           
  1735                           
  1736                           ;psect for function _UART_READ
  1737  02C0                     _UART_READ:	
  1738  02C0                     i1l817:	
  1739                           ;incstack = 0
  1740                           ; Regs used in _UART_READ: [wreg]
  1741                           
  1742  02C0                     i1l120:	
  1743                           ;UART.c: 36:   while(!RCIF);
  1744                           
  1745  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  1746  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  1747  02C2  1E8C               	btfss	12,5	;volatile
  1748  02C3  2AC5               	goto	u24_21
  1749  02C4  2AC6               	goto	u24_20
  1750  02C5                     u24_21:	
  1751  02C5  2AC0               	goto	i1l120
  1752  02C6                     u24_20:	
  1753  02C6                     i1l819:	
  1754                           
  1755                           ;UART.c: 37:   return RCREG;
  1756  02C6  081A               	movf	26,w	;volatile
  1757  02C7                     i1l123:	
  1758  02C7  0008               	return
  1759  02C8                     __end_of_UART_READ:	
  1760  007E                     btemp	set	126	;btemp
  1761  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     30      32
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_LOOP
    _UART_INIT->___aldiv
    _LOOP->_Abrir
    _LOOP->_Cerrar

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_UART_INIT
    _UART_INIT->___aldiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1118
                               _LOOP
                          _UART_INIT
 ---------------------------------------------------------------------------------
 (1) _UART_INIT                                           18    14      4    1118
                                              4 COMMON     2     2      0
                                             14 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     805
                                              3 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _LOOP                                                 2     2      0       0
                                              5 COMMON     2     2      0
                              _Abrir
                             _Cerrar
 ---------------------------------------------------------------------------------
 (2) _Cerrar                                               2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _Abrir                                                2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
                          _UART_READ
 ---------------------------------------------------------------------------------
 (4) _UART_READ                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LOOP
     _Abrir
     _Cerrar
   _UART_INIT
     ___aldiv

 _ISR (ROOT)
   _UART_READ

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      2A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1E      20       5       40.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      2A      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Mar 13 14:12:10 2020

                       _i 0078               __CFG_CP$OFF 0000                        _P1 0077  
                      l70 02AB                        _P2 003E                        l80 025B  
                      _S0 0079                        l67 028E                        _S1 003F  
                      l78 0258                        l88 0206                        u10 020C  
                      u11 020B                        u20 0211                        u21 0210  
                      u30 0218                        u31 0217                        u40 021F  
                      u41 021E                       l117 00F5                       l280 010A  
                     l290 0192                       l721 0207                       l731 0219  
                     l723 020C                       l733 021F                       l725 0211  
                     l735 0253                       l727 0212                       l921 01A5  
                     l913 0193                       l739 025A                       l931 01BB  
                     l923 01AA                       l915 0198                       l925 01AF  
                     l917 019D                       l943 0201                       l935 01C2  
                     l927 01B6                       l919 01A3                       l937 01C8  
                     l929 01BA                       l939 01FC                       _RA0 0028  
                     u400 01B6                       u401 01B5                       u410 01BA  
                     u411 01B9                       u420 01C1                       u421 01C0  
                     u430 01C8                       u350 0198                       u431 01C7  
                     u351 0197                       u360 019D                       u361 019C  
                     u370 01A3              __CFG_CPD$OFF 0000                       u371 01A2  
                     u380 01AA                       u700 017A                       u620 00FD  
                     _ISR 0291                       u381 01A9                       u701 0179  
                     u621 00FC                       u390 01AF                       u710 017F  
                     u630 010E                       u391 01AE                       u711 017E  
                     u631 010D                       u640 012D                       u720 002A  
                     u641 012C                       u730 0043                       u660 0141  
                     u661 0140                       u741 0055                       u725 0025  
                     u750 007E                       u742 0056                       u807 02B4  
                     u655 0132                       u751 007D                       u743 005B  
                     u735 003E                       u680 015C                       u760 008C  
                     u744 005C                       u817 01D0                       u681 015B  
                     u745 0061                       u770 00A5                       u746 0062  
                     u827 01DD                       u675 0143                       u837 01EA  
                     u685 0158                       u781 00B7                       u765 0087  
                     u790 00E3                       u782 00B8                       u847 01F7  
                     u695 016C                       u791 00E2                       u783 00BD  
                     u775 00A0                       u784 00BE                       u857 0227  
                     u785 00C3                       u786 00C4                       u867 0234  
                     u877 0241                       u887 024E              __CFG_LVP$OFF 0000  
                    ?_ISR 0070                      l1013 02AB                      l1015 02B0  
                    l1111 00DA                      l1103 001A                      l1017 02B9  
                    l1121 00EE                      l1113 00E3                      l1105 0075  
                    l1123 00EF                      l1115 00E7                      l1107 007E  
                    l1131 0260                      l1125 00F2                      l1117 00E8  
                    l1109 00D7                      l1141 0273                      l1133 0261  
                    l1071 0119                      l1063 00F6                      l1119 00EB  
                    l1151 027B                      l1143 0276                      l1135 0262  
                    l1081 013D                      l1073 011D                      l1065 00F9  
                    l1161 0282                      l1153 027C                      l1145 0277  
                    l1137 0263                      l1129 025C                      l1091 016B  
                    l1083 0141                      l1075 0125                      l1067 00FD  
                    l1171 0289                      l1163 0285                      l1155 027D  
                    l1147 0278                      l1139 0264                      l1093 0174  
                    l1085 014A                      l1077 012D                      l1069 010E  
                    l1165 0286                      l1157 027E                      l1149 027A  
                    l1087 015C                      l1079 0130                      l1095 017A  
                    l1167 0287                      l1159 0281                      l1097 017F  
                    l1089 016A                      l1169 0288                      l1099 018A  
                    _BRGH 04C2                      _CREN 00C4                      _RCIF 0065  
                    i1l62 02A4                      _LOOP 02AB                      _SPEN 00C7  
                    _TRMT 04C1                      _TXEN 04C5                      _SYNC 04C4  
            __CFG_WRT$OFF 0000                      _main 025C                      btemp 007E  
                    start 000C             __CFG_IESO$OFF 0000                     ??_ISR 0070  
                   ?_LOOP 0070           __end_of___aldiv 0193                     ?_main 0070  
           __CFG_WDTE$OFF 0000                     _ANSEL 0188                     i1l120 02C0  
                   i1l123 02C7                     i1l817 02C0                     i1l819 02C6  
                   i1l861 02A3                     i1l855 0291                     i1l857 0297  
                   i1l859 029F                     _RCREG 001A                     u24_20 02C6  
                   u24_21 02C5                     u33_20 0297                     u33_21 0296  
                   _SPBRG 0099                     _PORTA 0005                     _PORTB 0006  
                   _PORTC 0007                     _PORTD 0008                     _PORTE 0009  
                   _TRISA 0085                     _TRISB 0086                     _TRISC 0087  
                   _TRISD 0088                     _TRISE 0089                     _TXREG 0019  
                   _Abrir 0207        __size_of_UART_INIT 00DC        __size_of_UART_READ 0008  
          __CFG_FCMEN$OFF 0000            __CFG_BOREN$OFF 0000                     pclath 000A  
                   status 0003                     wtemp0 007E              __end_of_LOOP 02C0  
          __CFG_MCLRE$OFF 0000           __initialization 000F              __end_of_main 0291  
                  ??_LOOP 0075                    ??_main 0077                    ?_Abrir 0070  
                  _ANSELH 0189                    _TRISC6 043E                    _TRISC7 043F  
                  _Cerrar 0193            __CFG_PWRTE$OFF 0000         __end_of_UART_INIT 00F6  
       __end_of_UART_READ 02C8                 ??___aldiv 0073                    saved_w 007E  
 __end_of__initialization 0016             __end_of_Abrir 025C            __pcstackCOMMON 0070  
                 ??_Abrir 0073                __pbssBANK0 003E                   ?_Cerrar 0070  
              __pmaintext 025C                __pintentry 0004           __size_of_Cerrar 0074  
                 ___aldiv 00F6                   __ptext1 001A                   __ptext2 00F6  
                 __ptext3 02AB                   __ptext4 0193                   __ptext5 0207  
                 __ptext6 0291                   __ptext7 02C0              __size_of_ISR 001A  
        ___aldiv@dividend 0024      end_of_initialization 0016          ___aldiv@quotient 002A  
               _UART_INIT 001A                 _UART_READ 02C0            __end_of_Cerrar 0207  
              ?_UART_INIT 002E                ?_UART_READ 0070       start_initialization 000F  
             __end_of_ISR 02AB                  ??_Cerrar 0073  __CFG_FOSC$INTRC_NOCLKOUT 0000  
             __pbssCOMMON 0077                 ___latbits 0002             __pcstackBANK0 0020  
                ?___aldiv 0020               ??_UART_INIT 0032               ??_UART_READ 0070  
              UART_INIT@x 0074            __size_of_Abrir 0055           ___aldiv@divisor 0020  
       interrupt_function 0004           ___aldiv@counter 0028                  _PIE1bits 008C  
                _PIR1bits 000C          __size_of___aldiv 009D         __CFG_BOR4V$BOR40V 0000  
           __size_of_LOOP 0015         UART_INIT@baudrate 002E             __size_of_main 0035  
              _INTCONbits 000B                  intlevel1 0000                _OSCCONbits 008F  
            ___aldiv@sign 0029  
